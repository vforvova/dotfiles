# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/3
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Modes
:: default   : yabai -m config normal_window_opacity 0.85
:: focus   @ : yabai -m config normal_window_opacity 0.4

# :: insert  @ : yabai -m config window_border on

cmd + ctrl - w ; focus

focus < escape ; default

# Focus
focus < h : yabai -m window --focus west
focus < l : yabai -m window --focus east
focus < j : yabai -m window --focus south
focus < k : yabai -m window --focus north

# Focus space
focus < r : yabai -m space --focus recent \
          ; skhd -k escape

focus < 1 : yabai -m space --focus 1
focus < 2 : yabai -m space --focus 2
focus < 3 : yabai -m space --focus 3
focus < 4 : yabai -m space --focus 4
focus < 5 : yabai -m space --focus 5
focus < 6 : yabai -m space --focus 6
focus < 7 : yabai -m space --focus 7
focus < 8 : yabai -m space --focus 8
focus < 9 : yabai -m space --focus 9

# Focus display
focus < n : yabai -m display --focus next
focus < p : yabai -m display --focus prev

# Rebalace window sizes in the space
focus < b : yabai -m space --balance; skhd -k escape

# Swap managed window
focus < shift - h : yabai -m window --swap west
focus < shift - l : yabai -m window --swap east
focus < shift - j : yabai -m window --swap south
focus < shift - k : yabai -m window --swap north

# Warp managed window
focus < ctrl - h : yabai -m window --warp west
focus < ctrl - l : yabai -m window --warp east
focus < ctrl - j : yabai -m window --warp south
focus < ctrl - k : yabai -m window --warp north

# Increase window size
focus < left  : yabai -m window --resize left:-20:0
focus < up    : yabai -m window --resize top:0:-20
focus < right : yabai -m window --resize right:20:0
focus < down  : yabai -m window --resize bottom:0:20

# Decrease window size
focus < shift - left  : yabai -m window --resize right:-20:0
focus < shift - up    : yabai -m window --resize bottom:0:-20
focus < shift - right : yabai -m window --resize left:20:0
focus < shift - down  : yabai -m window --resize top:0:20

# Zoom
focus < z : yabai -m window --toggle zoom-fullscreen \
          ; skhd -k escape

# Rotate a split
focus < s : yabai -m window --toggle split \
          ; skhd -k escape
