@import "syntax-variables";

atom-text-editor {
	background-color: @syntax-background-color;
	color: @syntax-text-color;

	.wrap-guide {
		background-color: @syntax-wrap-guide-color;
	}
	.indent-guide {
		color: @syntax-indent-guide-color;
	}

	.invisible-character {
		color: @syntax-invisible-character-color;
	}

	// column that displays line numbers

	.gutter {
		background-color: @syntax-gutter-background-color;
		color: @syntax-gutter-text-color;

		.line-number {
			cursor: pointer;
			transition: color 0.2s ease;

			&.cursor-line {
				background-color: @syntax-gutter-background-color-selected;
				color: @syntax-gutter-text-color-selected;
			}

			&.cursor-line-no-selection {
				color: @syntax-gutter-text-color-selected;
			}
		}
	}

	.fold-marker:after,
	.gutter .line-number.folded,
	.gutter .line-number:after {
		color: @light-gray;
	}

	.invisible {
		color: @syntax-text-color;
	}

	.cursor {
		color: @syntax-cursor-color;
		// rest of .cursor styles --> nebula-ui
	}

	.cursor-line {
		background: @syntax-gutter-background-color-selected;
	}

	.selection .region {
		background-color: @syntax-selection-color;
	}

	.search-results {
		.syntax--marker {
			.region {
				background-color: transparent;
				border: 1px solid @syntax-result-marker-color;
			}
			&.current-result {
				.region {
					border: 1px solid @syntax-result-marker-color-selected;
				}
			}
		}
	}
}

// Syntax styles
.syntax--comment {
	color: lighten(@light-gray, 10%);
	transition: opacity 0.3s ease;
}
atom-workspace[theme-nebula-ui-focusmode=enabled] {
	.syntax--comment {
		opacity: 0.5;
		// transform: translate3d(0,0,0);
		&.syntax--whitespace {
			opacity: 1;
		}
	}
	.line:hover,
	.cursor-line {
		// brightens the next comment line (splash fade effect)
		+ .line {
			.syntax--comment {
				opacity: 0.7;
			}
		}
		.syntax--comment {
			opacity: 1 !important;
		}
	}
}

.syntax--keyword {
	color: @purple;

	&.syntax--control {
		color: @purple;
	}

	&.syntax--operator {
		color: @red;
	}

	&.syntax--other.syntax--special-method {
		color: @blue;
	}

	&.syntax--other.syntax--unit {
		color: @red;
	}
}

.syntax--storage {
	color: @blue;
}

.syntax--constant {
	color: @purple;

	&.syntax--character.syntax--escape {
		color: @cyan;
	}

	&.syntax--numeric {
		color: @purple;
	}

	&.syntax--other.syntax--color {
		color: @cyan;
	}

	&.syntax--other.syntax--symbol {
		color: @green;
	}
}

.syntax--variable {

	&.syntax--interpolation {
		color: darken(@red, 10%);
	}

	&.syntax--parameter.syntax--function {
		color: @syntax-text-color;
	}
	&.syntax--dom {
		color: @green;
	}
	&.syntax--other {
		color: @light-orange;
	}
}

.highlight-underline(@color) {
	// We are using mix() instead of fade() to work around
	// an ugly issue where 'transparent' passed through
	// fade reveals an ugly, darker color.
	// The things we do for good design.
	background-color: mix(@color, @dark-gray, 10%);
	box-shadow:
		inset 0 -1px 0 @color,
		0 7px 17px mix(@color, @dark-gray, 50%);
}
.highlight-underline(@color1; @color2) {
	@name: replace("pulse-underline-@{color1}", "#", "");

	animation: ~"@{name}" 2s ease 3;
	animation-fill-mode: forwards;
	@keyframes ~"@{name}" {
		0%, 100% {
			// make sure the highlight color is color1
			// this ensures the error is highlighted the instant it's typed
			.highlight-underline(@color1);
		}
		20% {
			.highlight-underline(@color2);
		}
	}
}

// error text
.syntax--invalid.syntax--illegal, .spell-check-misspelling .region {
	.highlight-underline(
		mix(@background-color-error, @dark-gray, 30%);
		@background-color-error
	);
	will-change: background-color, box-shadow;
	border-bottom: none;
}

.syntax--string {
	color: @orange;

	&.syntax--regexp {
		color: @cyan;

		.syntax--source.syntax--ruby.syntax--embedded {
			color: @orange;
		}
	}

	&.syntax--other.syntax--link {
		color: @red;
	}
}

.syntax--punctuation {
	&.syntax--definition {
		&.syntax--comment {
			color: lighten(@light-gray, 10%);
		}

		&.syntax--array,
		&.syntax--parameters,
		&.syntax--variable,
		&.syntax--bracket {
			color:lighten(@light-gray, 10%);
		}
		&.syntax--string {
			color: @light-orange;
		}

		&.syntax--heading,
		&.syntax--identity {
			color: @blue;
		}

		&.syntax--bold {
			color: @light-orange;
			font-weight: bold;
		}

		&.syntax--italic {
			color: @purple;
			font-style: italic;
		}
	}

	&.syntax--section.syntax--embedded {
		color: darken(@red, 10%);
	}

	&.syntax--tag {
		&.syntax--liquid {
			color: @purple;
			.syntax--liquid {
				color: @purple;
			}
		}
	}
	&.syntax--terminator {
		color: @light-gray;
	}
}

.syntax--support {
	&.syntax--class {
		color: @light-orange;
	}

	&.syntax--function {
		color: @red;

		&.syntax--any-method {
			color: @blue;
		}
	}
	&.syntax--property-name {
		color: @blue;
	}
}

.syntax--entity {
	&.syntax--name.syntax--function {
		color: @red;
	}

	&.syntax--name.syntax--type {
		color: @green;
		text-decoration: none;
	}

	&.syntax--other.syntax--inherited-class {
		color: @green;
	}

	&.syntax--name.syntax--class,
	&.syntax--name.syntax--type.syntax--class {
		color: @light-orange;
	}

	&.syntax--name.syntax--section {
		color: @blue;
	}

	&.syntax--name.syntax--tag {
		color: @red;
		text-decoration: none;
	}

	&.syntax--other.syntax--attribute-name {
		color: @green;

		&.syntax--id {
			color: @green;
		}
	}
}

.syntax--meta {
	&.syntax--class {
		color: @light-orange;
	}

	&.syntax--link {
		color: @orange;
	}
	&.syntax--delimiter {
		color: @light-gray;
	}
	&.syntax--require {
		color: @blue;
	}

	&.syntax--selector {
		color: @purple;
	}

	&.syntax--separator {
		background-color: @gray;
		color: @syntax-text-color;
	}
	&.syntax--brace {
		color: @light-gray;
	}
	&.syntax--tag {
		color: @light-gray;
	}
}

.syntax--none {
	color: @syntax-text-color;
}

.syntax--markup {
	&.syntax--bold {
		color: @orange;
		font-weight: bold;
	}

	&.syntax--changed {
		color: @purple;
	}

	&.syntax--deleted {
		color: @red;
	}

	&.syntax--italic {
		color: @purple;
		font-style: italic;
	}

	&.syntax--heading {
		.syntax--punctuation {
			&.syntax--definition {
				&.syntax--heading {
					color: @blue;
				}
			}

		}
	}

	&.syntax--inserted {
		color: @green;
	}

	&.syntax--list {
		color: @red;
	}

	&.syntax--quote {
		color: @orange;
	}

	&.syntax--raw.syntax--inline {
		color: @green;
	}
}

.syntax--source.syntax--gfm .syntax--markup {
	-webkit-font-smoothing: auto;

	&.syntax--heading {
		color: @green;
	}
}
// Mini editor
atom-text-editor[mini] .scroll-view {
	padding-left: 1px;
}